// Generated by CoffeeScript 1.6.3
(function() {
  var checkSocket, current_in_socket, currently_held, findSocket, format, makeBlock, makeElement, offset_coords, sockets, takeBlock;

  format = function(tree) {
    var args, char, form, in_special, string, _i, _len;
    if (!tree.hasOwnProperty("args" || tree.args.length === 0)) {
      return tree.form;
    } else {
      form = tree.form;
      args = tree.args;
      in_special = false;
      string = '';
      for (_i = 0, _len = form.length; _i < _len; _i++) {
        char = form[_i];
        if (in_special) {
          if (char === '%') {
            string += '%';
          } else {
            string += format(args.shift());
          }
        } else {
          if (char === '%') {
            in_special = true;
          } else {
            string += char;
          }
        }
      }
      return string;
    }
  };

  "# Test for block tree formatting\nconsole.log format {\n  form: \"alert %v\"\n  args: [{\n    form: \"'hello'\"\n  }]\n}";

  currently_held = null;

  offset_coords = {
    x: 10,
    y: 10
  };

  current_in_socket = null;

  sockets = [];

  makeElement = function(template) {
    var char, currently_modifying, element, in_special, socket, _i, _len;
    in_special = false;
    element = document.createElement("div");
    element.className = "block";
    element._ghostly_arguments = [];
    currently_modifying = document.createElement("span");
    for (_i = 0, _len = template.length; _i < _len; _i++) {
      char = template[_i];
      if (in_special) {
        if (char === '%') {
          currently_modifying.innerText += '%';
        } else {
          console.log("creating a socket");
          element.appendChild(currently_modifying);
          socket = document.createElement("div");
          socket.style.display = "inline-block";
          socket.className = "socket";
          socket.innerText = "  ";
          element._ghostly_arguments.push(socket);
          sockets.push($(socket));
          element.appendChild(socket);
          currently_modifying = document.createElement("span");
        }
        in_special = false;
      } else {
        if (char === '%') {
          in_special = true;
        } else {
          currently_modifying.innerText += char;
        }
      }
    }
    element.appendChild(currently_modifying);
    document.body.appendChild(element);
    return $(element);
  };

  findSocket = function(e) {
    var offset, socket, _i, _len;
    for (_i = 0, _len = sockets.length; _i < _len; _i++) {
      socket = sockets[_i];
      if (socket.children().length > 0) {
        continue;
      }
      offset = socket.offset();
      if (offset.left < e.pageX && e.pageX < offset.left + socket.width() && offset.top < e.pageY && e.pageY < offset.top + socket.height()) {
        return socket;
      }
    }
    return null;
  };

  checkSocket = function(e) {
    var offset, socket, _i, _len;
    for (_i = 0, _len = sockets.length; _i < _len; _i++) {
      socket = sockets[_i];
      offset = socket.offset();
      if (offset.left < e.pageX && e.pageX < offset.left + socket.width() && offset.top < e.pageY && e.pageY < offset.top + socket.height()) {
        return true;
      }
    }
    return false;
  };

  takeBlock = function(block, e) {
    currently_held = block;
    if (e != null) {
      offset_coords.x = e.pageX - block.element.offset().left;
      return offset_coords.y = e.pageY - block.element.offset().top;
    }
  };

  makeBlock = function(template) {
    var new_block, new_element;
    new_element = makeElement(template);
    new_block = {
      form: template,
      element: new_element,
      args: []
    };
    new_element.click(function(e) {
      e.stopPropagation();
      if (new_block === currently_held) {
        takeBlock(null);
      } else {
        takeBlock(new_block, e);
      }
      return false;
    });
    return takeBlock(new_block);
  };

  window.onload = function() {
    document.body.onmousemove = function(e) {
      var socket;
      if (currently_held != null) {
        if (!current_in_socket) {
          currently_held.element.offset({
            left: e.pageX - offset_coords.x,
            top: e.pageY - offset_coords.y
          });
        }
        socket = findSocket(e);
        if (!current_in_socket && (socket != null)) {
          currently_held.element.detach();
          socket.append(currently_held.element);
          socket.width(currently_held.element.width() + 4);
          socket.height(currently_held.element.height() + 4);
          return current_in_socket = true;
        } else if (current_in_socket && !checkSocket(e)) {
          currently_held.element.detach();
          ($(document.body)).append(currently_held.element);
          return current_in_socket = false;
        }
      }
    };
    return document.body.onkeydown = function(e) {
      if (e.keyCode === 13) {
        return makeBlock("moveto %v, %v");
      }
    };
  };

}).call(this);
