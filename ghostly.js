// Generated by CoffeeScript 1.6.3
(function() {
  var formatBlock, formatLine, indent, makeElement, moveTo, root;

  root = null;

  indent = function(string) {
    var line, lines, out, _i, _len;
    lines = string.split('\n');
    out = '';
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      out += '  ' + line + '\n';
    }
    return out;
  };

  formatBlock = function(tree) {
    var line, string, _i, _len;
    string = "";
    for (_i = 0, _len = tree.length; _i < _len; _i++) {
      line = tree[_i];
      string += indent(formatLine(line));
    }
    console.log(string.slice(0, -1));
    return string.slice(0, -1);
  };

  formatLine = function(tree) {
    var arg, char, fargs, in_special, string, x, _i, _j, _len, _len1, _ref, _ref1;
    fargs = [];
    _ref = tree.args;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      arg = _ref[_i];
      if (arg.type === 'w') {
        fargs.push(formatBlock(arg.lines));
      } else {
        fargs.push(formatLine(arg));
      }
    }
    in_special = false;
    string = '';
    x = 0;
    _ref1 = tree.form;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      char = _ref1[_j];
      if (in_special) {
        if (char === '%') {
          string += '%';
        } else {
          string += fargs[x];
          x += 1;
        }
        in_special = false;
      } else {
        if (char === '%') {
          in_special = true;
        } else {
          string += char;
        }
      }
    }
    return string;
  };

  makeElement = function(template) {
    var arg_number, char, currently_modifying, element, ice_tree, in_special, socket, _i, _len;
    arg_number = 0;
    in_special = false;
    element = document.createElement("div");
    element.className = "block";
    currently_modifying = document.createElement("span");
    ice_tree = {
      form: template,
      args: [],
      element: element
    };
    element._ice_tree = ice_tree;
    for (_i = 0, _len = template.length; _i < _len; _i++) {
      char = template[_i];
      if (in_special) {
        if (char === '%') {
          currently_modifying.innerText += '%';
        } else {
          element.appendChild(currently_modifying);
          socket = document.createElement("div");
          socket.className = char === 'w' ? "block_socket" : "socket";
          ($(socket)).droppable({
            tolerance: "pointer",
            activeClass: "ui-state-default",
            hoverClass: "ui-state-hover",
            greedy: true,
            accept: function(el) {
              return (this._ice_insertable != null) && this._ice_insertable;
            },
            drop: function(event, ui) {
              if (event.target === this) {
                return moveTo(ui.draggable[0], this);
              }
            }
          });
          socket._ice_parent = ice_tree;
          socket._ice_number = arg_number;
          socket._ice_insertable = true;
          element.appendChild(socket);
          currently_modifying = document.createElement("span");
          arg_number += 1;
        }
        in_special = false;
      } else {
        if (char === '%') {
          in_special = true;
        } else {
          currently_modifying.innerText += char;
        }
      }
    }
    ice_tree.arglen = arg_number;
    element.appendChild(currently_modifying);
    ($(element)).draggable({
      appendTo: "body",
      cursor: "move",
      helper: "clone",
      revert: "invalid"
    }).droppable({
      tolerance: "pointer",
      activeClass: "ui-state-default",
      hoverClass: "ui-state-hover",
      greedy: true,
      accept: function(el) {
        return (this._ice_insertable != null) && this._ice_insertable;
      },
      drop: function(event, ui) {
        if (event.target === this) {
          return moveTo(ui.draggable[0], this);
        }
      }
    });
    return element;
  };

  moveTo = function(drag, drop) {
    var i, _i, _j, _ref, _ref1;
    console.log("drag", drag._ice_parent, "drop", drop._ice_parent);
    if (drag._ice_parent != null) {
      if (drag._ice_insert_type === 'block_socket') {
        for (i = _i = 0, _ref = drag._ice_parent.args[drop._ice_number].lines.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (drag._ice_parent.args[drop._ice_number].lines[i] === drag._ice_tree) {
            drag._ice_parent.args[drop._ice_number].lines.splice(i, 1);
            break;
          }
        }
      } else {
        drag._ice_parent.args[drag._ice_number] = null;
      }
    }
    if (drag._ice_literal_parent != null) {
      drag._ice_literal_parent._ice_insertable = true;
    }
    if (($(drop)).hasClass("block")) {
      for (i = _j = 0, _ref1 = drop._ice_parent.args[drop._ice_number].lines.length; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        if (drop._ice_parent.args[drop._ice_number].lines[i] === drop._ice_tree) {
          drop._ice_parent.args[drop._ice_number].lines.splice(i + 1, 0, drag._ice_tree);
          break;
        }
      }
      drag._ice_insert_type = "block_socket";
      drag._ice_insertable = true;
      ($(drop)).after(($("<div>")).append($(drag)));
    } else if (($(drop)).hasClass("block_socket")) {
      if (drop._ice_parent.args[drop._ice_number] == null) {
        drop._ice_parent.args[drop._ice_number] = {
          type: 'w',
          lines: []
        };
      }
      drop._ice_parent.args[drop._ice_number].lines.unshift(drag._ice_tree);
      console.log("dropping into block_socket", drop._ice_parent[drop._ice_number]);
      drag._ice_insert_type = "block_socket";
      drag._ice_insertable = true;
      drop._ice_insertable = false;
      ($(drop)).append(($("<div>")).prepend($(drag)));
    } else {
      drop._ice_parent.args[drop._ice_number] = drag._ice_tree;
      drag._ice_insert_type = "socket";
      drag._ice_insertable = false;
      drop._ice_insertable = false;
      ($(drop)).append($(drag));
    }
    drop._ice_contents = drag;
    drag._ice_literal_parent = drop;
    drag._ice_parent = drop._ice_parent;
    drag._ice_number = drop._ice_number;
    return ($("#out")).text(formatLine(root._ice_tree));
  };

  window.onload = function() {
    var i, _i, _j, _k;
    root = makeElement("window.onload = ->\n%w");
    document.body.appendChild(root);
    for (i = _i = 1; _i <= 5; i = ++_i) {
      document.body.appendChild(makeElement("alert %v"));
    }
    for (i = _j = 1; _j <= 2; i = ++_j) {
      document.body.appendChild(makeElement("for _ in [1..10]\n%w"));
    }
    for (i = _k = 1; _k <= 5; i = ++_k) {
      document.body.appendChild(makeElement(Math.random().toString().slice(0, 3)));
    }
    "\n($ \".block\").draggable {\n  appendTo: \"body\"\n  cursor: \"move\"\n  helper: \"clone\"\n  revert: \"invalid\"\n}\n\n($ \".socket, .block_socket, .block\").droppable {\n  tolerance: \"pointer\"\n  activeClass: \"ui-state-default\"\n  hoverClass: \"ui-state-hover\"\n  greedy: true\n  accept: (el) ->\n    return this._ice_insertable? and this._ice_insertable\n  drop: (event, ui) ->\n    if event.target == this\n      moveTo ui.draggable[0], this\n}";
    return ($("#melt")).click(function() {
      return $(" .block, .socket, .block_socket").css("border", "none");
    });
  };

}).call(this);
