// Generated by CoffeeScript 1.6.3
(function() {
  var currentDrop, formatBlock, formatLine, getSavedList, indent, loadProgram, makeElement, makeElementFromBlock, makeElementFromLine, makeElementFromTree, makeTemplateElement, moveTo, root, saveProgram;

  root = null;

  currentDrop = [];

  indent = function(string) {
    var line, lines, out, _i, _len;
    lines = string.split('\n');
    out = '';
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      out += '  ' + line + '\n';
    }
    return out;
  };

  formatBlock = function(tree) {
    var line, string, _i, _len;
    string = "";
    for (_i = 0, _len = tree.length; _i < _len; _i++) {
      line = tree[_i];
      if ((line != null) && line !== void 0) {
        string += indent(formatLine(line));
      }
    }
    return string.slice(0, -1);
  };

  formatLine = function(tree) {
    var arg, char, fargs, in_special, string, x, _i, _j, _len, _len1, _ref, _ref1;
    fargs = [];
    _ref = tree.args;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      arg = _ref[_i];
      if ((arg == null) || arg === void 0) {
        fargs.push("  ");
      } else if (arg.type === 'w') {
        fargs.push(formatBlock(arg.lines));
      } else {
        fargs.push(formatLine(arg));
      }
    }
    in_special = false;
    string = '';
    x = 0;
    _ref1 = tree.form;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      char = _ref1[_j];
      if (in_special) {
        if (char === '%') {
          string += '%';
        } else {
          string += (fargs[x] != null) && fargs[x] !== void 0 ? fargs[x] : '  ';
          x += 1;
        }
        in_special = false;
      } else {
        if (char === '%') {
          in_special = true;
        } else {
          string += char;
        }
      }
    }
    return string;
  };

  makeElement = function(template) {
    var arg_number, char, currently_modifying, element, ice_tree, in_special, input_socket, socket, _i, _len;
    arg_number = 0;
    in_special = false;
    element = document.createElement("div");
    element.className = "block";
    currently_modifying = document.createElement("span");
    ice_tree = {
      form: template,
      args: []
    };
    element._ice_tree = ice_tree;
    for (_i = 0, _len = template.length; _i < _len; _i++) {
      char = template[_i];
      if (in_special) {
        if (char === '%') {
          currently_modifying.innerText += '%';
        } else {
          element.appendChild(currently_modifying);
          if (char === 't') {
            socket = document.createElement("input");
            socket.className = "input_socket";
            element.appendChild(socket);
            $(socket).autoGrowInput({
              comfortZone: 10,
              minWidth: 20,
              maxWidth: 1000
            });
            socket._ice_number = arg_number;
            ice_tree.args[arg_number] = {
              form: "",
              args: []
            };
            socket.onkeyup = function() {
              ice_tree.args[this._ice_number].form = this.value.replace(/\%/g, "%%");
              return ($("#out")).text(formatLine(root._ice_tree));
            };
          } else {
            socket = document.createElement("div");
            socket.className = char === 'w' ? "block_socket" : "socket";
            element.appendChild(socket);
            if (char !== 'w') {
              input_socket = document.createElement("input");
              input_socket.className = "input_socket";
              input_socket._ice_number = arg_number;
              ice_tree.args[arg_number] = {
                form: "",
                args: []
              };
              input_socket.onkeyup = function() {
                ice_tree.args[this._ice_number].form = this.value.replace(/\%/g, "%%");
                return ($("#out")).text(formatLine(root._ice_tree));
              };
              socket.appendChild(input_socket);
              socket._ice_alt_input = input_socket;
              $(input_socket).autoGrowInput({
                comfortZone: 10,
                minWidth: 20,
                maxWidth: 1000
              });
            }
            socket._ice_parent = ice_tree;
            socket._ice_number = arg_number;
            socket._ice_insertable = true;
          }
          currently_modifying = document.createElement("span");
          arg_number += 1;
        }
        in_special = false;
      } else {
        if (char === '%') {
          in_special = true;
        } else {
          currently_modifying.innerText += char;
        }
      }
    }
    ice_tree.arglen = arg_number;
    element.appendChild(currently_modifying);
    ($(element)).draggable({
      appendTo: "body",
      helper: "clone",
      revert: "invalid"
    });
    ($(".block, .socket, .block_socket")).droppable({
      tolerance: "pointer",
      activeClass: "ui-state-default",
      greedy: true,
      accept: function(el) {
        return (this._ice_insertable != null) && this._ice_insertable;
      },
      over: function(event, ui) {
        if (currentDrop.length > 0) {
          ($(currentDrop[0])).removeClass("ui-state-hover");
        }
        ($(this)).addClass("ui-state-hover");
        return currentDrop.unshift(this);
      },
      out: function(event, ui) {
        ($(currentDrop[0])).removeClass("ui-state-hover");
        return currentDrop.shift();
      },
      drop: function(event, ui) {
        if (currentDrop[0] === this) {
          ($(this)).removeClass("ui-state-hover");
          moveTo(ui.draggable[0], this);
          return currentDrop = [];
        }
      }
    });
    return element;
  };

  moveTo = function(drag, drop) {
    var i, _i, _j, _ref, _ref1;
    if (drag._ice_template_clone != null) {
      drag._ice_template_clone.show();
      drag._ice_template_clone = null;
    }
    if (drag._ice_parent != null) {
      if (drag._ice_insert_type === 'block_socket') {
        for (i = _i = 0, _ref = drag._ice_parent.args[drag._ice_number].lines.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (drag._ice_parent.args[drag._ice_number].lines[i] === drag._ice_tree) {
            drag._ice_parent.args[drag._ice_number].lines.splice(i, 1);
            break;
          }
        }
      } else {
        drag._ice_parent.args[drag._ice_number] = null;
      }
    }
    if (drag._ice_literal_parent != null) {
      drag._ice_literal_parent._ice_insertable = true;
    }
    if ((drag._ice_literal_parent != null) && drag._ice_literal_parent._ice_alt_input !== void 0) {
      $(drag._ice_literal_parent._ice_alt_input).show();
      drag._ice_parent.args[drag._ice_number] = {
        form: "",
        args: []
      };
    }
    if (drop != null) {
      if (($(drop)).hasClass("block")) {
        for (i = _j = 0, _ref1 = drop._ice_parent.args[drop._ice_number].lines.length; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          if (drop._ice_parent.args[drop._ice_number].lines[i] === drop._ice_tree) {
            drop._ice_parent.args[drop._ice_number].lines.splice(i + 1, 0, drag._ice_tree);
            break;
          }
        }
        drag._ice_insert_type = "block_socket";
        drag._ice_insertable = true;
        ($(drop)).after(($("<div>")).append($(drag)));
      } else if (($(drop)).hasClass("block_socket")) {
        if (drop._ice_parent.args[drop._ice_number] == null) {
          drop._ice_parent.args[drop._ice_number] = {
            type: 'w',
            lines: []
          };
        }
        drop._ice_parent.args[drop._ice_number].lines.unshift(drag._ice_tree);
        drag._ice_insert_type = "block_socket";
        drag._ice_insertable = true;
        drop._ice_insertable = false;
        ($(drop)).prepend(($("<div>")).prepend($(drag)));
      } else {
        if (drop._ice_alt_input !== void 0) {
          $(drop._ice_alt_input).hide();
        }
        drop._ice_parent.args[drop._ice_number] = drag._ice_tree;
        drag._ice_insert_type = "socket";
        drag._ice_insertable = false;
        drop._ice_insertable = false;
        ($(drop)).append($(drag));
      }
      drop._ice_contents = drag;
      drag._ice_literal_parent = drop;
      drag._ice_parent = drop._ice_parent;
      drag._ice_number = drop._ice_number;
    }
    return ($("#out")).text(formatLine(root._ice_tree));
  };

  makeElementFromBlock = function(tree) {
    var line, _i, _len;
    for (_i = 0, _len = tree.length; _i < _len; _i++) {
      line = tree[_i];
      string += indent(makeElementFromLine(line));
    }
    return string.slice(0, -1);
  };

  makeElementFromLine = function(tree) {
    var arg, char, fargs, in_special, string, x, _i, _j, _len, _len1, _ref, _ref1;
    fargs = [];
    _ref = tree.args;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      arg = _ref[_i];
      if (arg == null) {
        fargs.push("  ");
      } else if (arg.type === 'w') {
        fargs.push(formatBlock(arg.lines));
      } else {
        fargs.push(formatLine(arg));
      }
    }
    in_special = false;
    string = '';
    x = 0;
    _ref1 = tree.form;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      char = _ref1[_j];
      if (in_special) {
        if (char === '%') {
          string += '%';
        } else {
          string += (fargs[x] != null) && fargs[x] !== void 0 ? fargs[x] : '  ';
          x += 1;
        }
        in_special = false;
      } else {
        if (char === '%') {
          in_special = true;
        } else {
          string += char;
        }
      }
    }
    return string;
  };

  makeTemplateElement = function(template) {
    var already_used, element, new_template;
    element = $(makeElement(template));
    already_used = false;
    new_template = null;
    return element.bind("dragstart", function() {
      if (!already_used) {
        new_template = $(makeTemplateElement(template)).hide();
        element.after(new_template);
        element[0]._ice_template_clone = new_template;
        return already_used = true;
      }
    });
  };

  makeElementFromBlock = function(block) {
    var line, result, _i, _len, _ref;
    result = [];
    _ref = block.lines;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      line = _ref[_i];
      result.push(makeElementFromTree(line));
    }
    return result;
  };

  makeElementFromTree = function(tree) {
    var arg, arg_number, char, currently_modifying, el, element, fargs, in_special, input_socket, new_div, socket, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    fargs = [];
    _ref = tree.args;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      arg = _ref[_i];
      if (arg == null) {
        fargs.push(null);
      } else if (arg.type === "w") {
        fargs.push(makeElementFromBlock(arg));
      } else {
        fargs.push(makeElementFromTree(arg));
      }
    }
    arg_number = 0;
    in_special = false;
    element = document.createElement("div");
    element.className = "block";
    currently_modifying = document.createElement("span");
    _ref1 = tree.form;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      char = _ref1[_j];
      if (in_special) {
        if (char === '%') {
          currently_modifying.innerText += '%';
        } else {
          element.appendChild(currently_modifying);
          if (char === 't') {
            socket = document.createElement("input");
            socket.className = "input_socket";
            socket.value = tree.args[arg_number].form;
            element.appendChild(socket);
            $(socket).autoGrowInput({
              comfortZone: 10,
              minWidth: 20,
              maxWdith: 1000
            });
            socket._ice_number = arg_number;
            socket.onkeyup = function() {
              return tree.args[this._ice_number].form = this.value;
            };
          } else if (char === 'w') {
            socket = document.createElement("div");
            socket.className = "block_socket";
            element.appendChild(socket);
            socket._ice_parent = tree;
            socket._ice_number = arg_number;
            if (fargs[arg_number] !== void 0 && (fargs[arg_number] != null)) {
              socket._ice_insertable = false;
              _ref2 = fargs[arg_number];
              for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                el = _ref2[_k];
                el._ice_parent = tree;
                el._ice_number = arg_number;
                el._ice_insertable = true;
                el._ice_literal_parent = socket;
                new_div = document.createElement("div");
                new_div.appendChild(el);
                socket.appendChild(new_div);
              }
            } else {
              socket._ice_insertable = true;
            }
          } else {
            input_socket = document.createElement("input");
            input_socket.className = "input_socket";
            input_socket.value = tree.args[arg_number].form;
            input_socket._ice_number = arg_number;
            input_socket.onkeyup = function() {
              return tree.args[this._ice_number].form = this.value;
            };
            socket = document.createElement("div");
            socket.className = "socket";
            element.appendChild(socket);
            socket.appendChild(input_socket);
            $(input_socket).autoGrowInput({
              comfortZone: 10,
              minWidth: 20,
              maxWdith: 1000
            });
            socket._ice_parent = tree;
            socket._ice_number = arg_number;
            socket._ice_alt_input = input_socket;
            if (fargs[arg_number] !== void 0 && (fargs[arg_number] != null)) {
              socket.appendChild(fargs[arg_number]);
              $(input_socket).hide();
              socket._ice_insertable = false;
            } else {
              socket._ice_insertable = true;
            }
          }
          currently_modifying = document.createElement("span");
          arg_number += 1;
        }
        in_special = false;
      } else {
        if (char === '%') {
          in_special = true;
        } else {
          currently_modifying.innerText += char;
        }
      }
    }
    tree.arglen = arg_number;
    element.appendChild(currently_modifying);
    element._ice_tree = tree;
    $(element).draggable({
      appendTo: "body",
      cursor: "move",
      helper: "clone",
      revert: "invalid"
    });
    ($(".block, .socket, .block_socket")).droppable({
      tolerance: "pointer",
      activeClass: "ui-state-default",
      greedy: true,
      accept: function(el) {
        return (this._ice_insertable != null) && this._ice_insertable;
      },
      over: function(event, ui) {
        if (currentDrop.length > 0) {
          ($(currentDrop[0])).removeClass("ui-state-hover");
        }
        ($(this)).addClass("ui-state-hover");
        return currentDrop.unshift(this);
      },
      out: function(event, ui) {
        ($(currentDrop[0])).removeClass("ui-state-hover");
        return currentDrop.shift();
      },
      drop: function(event, ui) {
        if (currentDrop[0] === this) {
          ($(this)).removeClass("ui-state-hover");
          moveTo(ui.draggable[0], this);
          return currentDrop = [];
        }
      }
    });
    return element;
  };

  getSavedList = function() {
    var key;
    for (key in localStorage) {
      return key;
    }
  };

  loadProgram = function(name) {};

  saveProgram = function(name) {
    return localStorage[name] = JSON.stringify(root._ice_tree);
  };

  window.onload = function() {
    var dialog, dialog_title, list, palette, template, templates, workspace, _i, _len;
    root = makeElement("(->\n%w\n)()");
    palette = $("#palette");
    workspace = $("#workspace");
    ($("#trashbin")).droppable({
      tolerance: "pointer",
      activeClass: "ui-state-default",
      hoverClass: "ui-state-hover",
      accept: ".block",
      drop: function(event, ui) {
        moveTo(ui.draggable[0], null);
        return ui.draggable.remove();
      }
    });
    workspace.append(root);
    templates = ["alert(%v)", "prompt(%v)", "for %t in [0..%v]\n%w", "for %t in %v\n%w", "%t", "\"%t\"", "(%v == %v)", "(%v + %v)", "if %v \n%w\nelse \n%w"];
    for (_i = 0, _len = templates.length; _i < _len; _i++) {
      template = templates[_i];
      palette.append($("<div>").addClass("template_wrapper").append(makeTemplateElement(template)));
    }
    ($("#melt")).click(function() {
      return $(" .block, .socket, .block_socket, .input_socket").animate({
        "border-width": 0,
        padding: 0
      }, 300);
    });
    ($("#run")).click(function() {
      return CoffeeScript["eval"](formatLine(root._ice_tree));
    });
    $("#clone").click(function() {
      return workspace.append(makeElementFromTree(root._ice_tree));
    });
    $("#new_block").click(function() {
      return palette.append($("<div>").addClass("template_wrapper").append(makeTemplateElement((prompt("Enter template string:")).replace(/\\n/g, "\n"))));
    });
    dialog = $("#dialog").hide();
    dialog_title = $("#dialog_title");
    list = $("#list");
    $("#load").click(function() {
      var key, _fn, _results;
      dialog.show();
      dialog_title.text("Load program");
      list.html("");
      _fn = function() {
        var name;
        name = key;
        return list.append($("<div>").text(name).addClass("list_element").click(function() {
          $(root).remove();
          root = makeElementFromTree(JSON.parse(localStorage[name]));
          workspace.append(root);
          ($("#out")).text(formatLine(root._ice_tree));
          return dialog.hide();
        }));
      };
      _results = [];
      for (key in localStorage) {
        _fn();
        _results.push($("#name").keydown(function(e) {
          if (e.keyCode === 13) {
            $(root).remove();
            root = makeElementFromTree(JSON.parse(localStorage[this.value]));
            workspace.append(root);
            ($("#out")).text(formatLine(root._ice_tree));
            return dialog.hide();
          }
        }));
      }
      return _results;
    });
    $("#save").click(function() {
      var key, _fn, _results;
      dialog.show();
      dialog_title.text("Save program");
      list.html("");
      _fn = function() {
        var name;
        name = key;
        return list.append($("<div>").text(name).addClass("list_element").click(function() {
          saveProgram(name);
          return dialog.hide();
        }));
      };
      _results = [];
      for (key in localStorage) {
        _fn();
        _results.push($("#name").keydown(function(e) {
          if (e.keyCode === 13) {
            saveProgram(this.value);
            return dialog.hide();
          }
        }));
      }
      return _results;
    });
    return $.contextMenu({
      selector: ".block",
      callback: function(key, options) {
        if (key === "copy") {
          return workspace.append(makeElementFromTree($.extend(true, {}, this[0]._ice_tree)));
        } else if (key === 'delete') {
          moveTo(this[0], null);
          return this.remove();
        }
      },
      items: {
        "copy": {
          name: "Copy",
          icon: "copy"
        },
        "delete": {
          name: "Delete",
          icon: "delete"
        }
      }
    });
  };

}).call(this);
