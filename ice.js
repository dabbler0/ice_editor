// Generated by CoffeeScript 1.6.3
(function() {
  var IceBlockSegment, IceEditor, IceInlineSegment, IceSegment, IceStatement, IceStaticSegment, moveSegment,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  moveSegment = function(mobile, target) {
    console.log('moving', mobile, 'to', target);
    if (mobile.parent != null) {
      if (mobile.parent.type === 'block') {
        console.log('removing block element from', mobile.parent.children.indexOf(mobile));
        mobile.parent.children.splice(mobile.parent.children.indexOf(mobile), 1);
        mobile.parent.droppable = true;
      } else {
        mobile.parent.children.length = 0;
        mobile.parent.droppable = true;
      }
    }
    if (target.type === 'block') {
      target.children.unshift(mobile);
      target.droppable = mobile.droppable = true;
      return mobile.parent = target;
    } else if (target.type === 'statement') {
      target.parent.children.splice(target.parent.children.indexOf(target) + 1, 0, mobile);
      target.droppable = mobile.droppable = true;
      return mobile.parent = target.parent;
    } else if (target.type === 'inline') {
      target.children = [mobile];
      target.droppable = mobile.droppable = false;
      return mobile.parent = target;
    }
  };

  IceSegment = (function() {
    function IceSegment() {
      this.parent = null;
      this.index = 0;
      this.children = [];
      this.type = null;
    }

    IceSegment.prototype._reconstruct = function() {
      return new IceSegment();
    };

    IceSegment.prototype.stringify = function() {
      var child, string, _i, _len, _ref;
      string = '';
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (typeof child === 'string') {
          string += child;
        } else {
          string += child.stringify();
        }
      }
      return string;
    };

    IceSegment.prototype.clone = function() {
      var child, copy, _i, _len, _ref;
      copy = this._reconstruct();
      copy.type = this.type;
      copy.parent = this.parent;
      copy.children = [];
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (typeof child === 'string') {
          copy.children.push(child);
        } else {
          copy.children.push(child.clone());
        }
      }
      return copy;
    };

    IceSegment.prototype.templateify = function() {
      var block, new_block, segment;
      block = this.blockify();
      segment = this;
      new_block = null;
      block.on('dragstart', function() {
        var clone;
        clone = segment.clone();
        new_block = clone.templateify();
        new_block.hide();
        block.after(new_block);
        return block.unbind('dragstart');
      });
      return block.on('dragstop', function() {
        if (segment.parent != null) {
          new_block.show();
          return block.unbind('dragstop');
        }
      });
    };

    return IceSegment;

  })();

  IceStaticSegment = (function(_super) {
    __extends(IceStaticSegment, _super);

    function IceStaticSegment(text) {
      this.parent = null;
      this.index = 0;
      this.children = [text];
      this.type = 'static';
    }

    IceStaticSegment.prototype._reconstruct = function() {
      return new IceStaticSegment();
    };

    IceStaticSegment.prototype.blockify = function() {
      var block, child, _i, _len, _ref;
      block = $('<span>');
      block.addClass('ice_segment');
      block.addClass('ice_' + this.type);
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (typeof child === 'string') {
          block.append(child);
        } else {
          block.append(child.blockify());
        }
      }
      return block;
    };

    return IceStaticSegment;

  })(IceSegment);

  IceInlineSegment = (function(_super) {
    __extends(IceInlineSegment, _super);

    function IceInlineSegment(accept) {
      this.parent = null;
      this.index = 0;
      this.children = [];
      this.type = 'inline';
      this.accept = accept;
      this.droppable = true;
    }

    IceInlineSegment.prototype._reconstruct = function() {
      return new IceInlineSegment(this.accept);
    };

    IceInlineSegment.prototype.blockify = function() {
      var block, child, input, segment, _i, _len, _ref;
      segment = this;
      block = $('<span>');
      block.addClass('ice_segment');
      block.addClass('ice_' + this.type);
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (typeof child === 'string') {
          block.append(child);
        } else {
          block.append(child.blockify());
        }
      }
      block.data('ice_tree', segment);
      input = $("<input>");
      input.addClass("ice_input");
      input.keyup(function() {
        if (segment.droppable) {
          return segment.children[0] = this.value;
        }
      });
      block.append(input);
      input.autoGrowInput({
        comfortZone: 0,
        minWidth: 20,
        maxWidth: Infinity
      });
      block.droppable({
        greedy: true,
        tolerance: 'pointer',
        hoverClass: 'highlight',
        accept: function(drop) {
          return segment.droppable && segment.accept(drop.data('ice_tree'));
        },
        drop: function(event, ui) {
          if (event.target === this) {
            input.val("");
            moveSegment(ui.draggable.data('ice_tree'), segment);
            return $(this).prepend(ui.draggable);
          }
        }
      });
      return block;
    };

    return IceInlineSegment;

  })(IceSegment);

  IceBlockSegment = (function(_super) {
    __extends(IceBlockSegment, _super);

    function IceBlockSegment() {
      this.parent = null;
      this.index = 0;
      this.children = [];
      this.type = 'block';
      this.droppable = true;
    }

    IceBlockSegment.prototype._reconstruct = function() {
      return new IceBlockSegment();
    };

    IceBlockSegment.prototype.stringify = function() {
      var child, string, _i, _len, _ref;
      string = '';
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        string += child.stringify().replace(/n/g, '\n  ') + '\n';
      }
      return string;
    };

    IceBlockSegment.prototype.blockify = function() {
      var block, child, drop_target, segment, _i, _len, _ref;
      segment = this;
      block = $('<div>');
      block.addClass('ice_segment');
      block.addClass('ice_' + this.type);
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (typeof child === 'string') {
          block.append(child);
        } else {
          block.append($('<div>').append(child.blockify()));
        }
      }
      drop_target = $('<div>');
      drop_target.addClass('ice_block_drop_target');
      drop_target.droppable({
        greedy: true,
        tolerance: 'pointer',
        hoverClass: 'highlight',
        accept: function() {
          return segment.droppable;
        },
        drop: function(event, ui) {
          if (event.target === this) {
            moveSegment(ui.draggable.data('ice_tree'), segment);
            return block.prepend($('<div>').append(ui.draggable));
          }
        }
      });
      block.append(drop_target);
      return block;
    };

    return IceBlockSegment;

  })(IceSegment);

  IceStatement = (function(_super) {
    __extends(IceStatement, _super);

    function IceStatement(template) {
      var child, _i, _len;
      this.parent = null;
      this.children = [];
      for (_i = 0, _len = template.length; _i < _len; _i++) {
        child = template[_i];
        this.children.push(child.clone());
      }
      this.type = 'statement';
      this.droppable = true;
    }

    IceStatement.prototype._reconstruct = function() {
      return new IceStatement([]);
    };

    IceStatement.prototype.blockify = function() {
      var block, child, drop_target, segment, _i, _len, _ref;
      segment = this;
      block = $('<div>');
      block.addClass('ice_segment');
      block.addClass('ice_' + this.type);
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (typeof child === 'string') {
          block.append(child);
        } else {
          block.append(child.blockify());
        }
      }
      block.data('ice_tree', segment);
      drop_target = $('<div>');
      drop_target.addClass('ice_drop_target');
      drop_target.droppable({
        greedy: true,
        tolerance: 'pointer',
        hoverClass: 'highlight',
        accept: function() {
          return segment.droppable;
        },
        drop: function(event, ui) {
          if (event.target === this) {
            moveSegment(ui.draggable.data('ice_tree'), segment);
            return block.after($('<div>').append(ui.draggable));
          }
        }
      });
      block.append(drop_target);
      block.draggable({
        appendTo: 'body',
        helper: 'clone',
        revert: 'invalid'
      });
      return block;
    };

    return IceStatement;

  })(IceSegment);

  IceEditor = (function() {
    function IceEditor(element, templates) {
      var template, _i, _len;
      this.element = $(element);
      this.palette = $('<div>');
      this.palette.addClass('ice_palette blockish');
      for (_i = 0, _len = templates.length; _i < _len; _i++) {
        template = templates[_i];
        this.palette.append($('<div>').append(template.templateify()));
      }
      this.workspace = $('<div>');
      this.workspace.addClass('ice_workspace blockish');
      this.root = new IceBlockSegment();
      this.workspace.append(this.root.blockify());
      this.element.append(this.palette).append(this.workspace);
    }

    IceEditor.prototype.getValue = function() {
      return this.root.stringify();
    };

    return IceEditor;

  })();

  window.onload = function() {
    var addition, editor;
    addition = new IceStatement([
      new IceStaticSegment('('), new IceInlineSegment(function() {
        return true;
      }), new IceStaticSegment('+'), new IceInlineSegment(function() {
        return true;
      }), new IceStaticSegment(')')
    ]);
    editor = new IceEditor(document.getElementById('editor'), [addition]);
    return window.editor = editor;
  };

}).call(this);

/*
//@ sourceMappingURL=ice.map
*/
