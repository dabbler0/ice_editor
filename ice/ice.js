// Generated by CoffeeScript 1.6.3
/*
Copyright (c) 2013 Anthony Bau

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/


(function() {
  var IceBlockSegment, IceEditor, IceHandwrittenSegment, IceInlineSegment, IceMultiSegment, IceSegment, IceStatement, IceStaticSegment, corners, defrost, destructure, genPosData, moveSegment, overlap, quoted_regex, to_frosting,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  window.combobox = function(element, source) {
    console.log('Comboboxing');
    element.autocomplete({
      source: source,
      appendTo: element.parent(),
      delay: 0,
      minLength: 0,
      messages: {
        noResults: '',
        results: function() {
          return '';
        }
      }
    });
    return element.after($('<button>').addClass('combobox-searcher').html('&#x25BC;').click(function() {
      return element.autocomplete('search', '');
    }));
  };

  moveSegment = function(mobile, target) {
    var child, last_child, _i, _j, _len, _len1, _ref, _ref1;
    if ((mobile.is_selected_wrapper != null) && mobile.is_selected_wrapper) {
      if (target != null) {
        last_child = target;
        _ref = mobile.elements;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          moveSegment(child, last_child);
          last_child = child;
        }
      } else {
        _ref1 = mobile.elements;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          child = _ref1[_j];
          moveSegment(child, null);
        }
      }
      return;
    }
    if (mobile.parent != null) {
      if (mobile.parent.type === 'block') {
        mobile.parent.children.splice(mobile.parent.children.indexOf(mobile), 1);
        mobile.parent.droppable = true;
      } else {
        console.log('Setting droppable of', mobile.parent, 'to true');
        mobile.parent.children.length = 0;
        mobile.parent.droppable = true;
      }
    }
    if (target != null) {
      if (target.type === 'block') {
        target.children.unshift(mobile);
        target.droppable = mobile.droppable = true;
        return mobile.parent = target;
      } else if (target.type === 'statement' && (target.parent != null)) {
        target.parent.children.splice(target.parent.children.indexOf(target) + 1, 0, mobile);
        target.droppable = mobile.droppable = true;
        return mobile.parent = target.parent;
      } else if (target.type === 'inline') {
        target.children = [mobile];
        target.droppable = mobile.droppable = false;
        return mobile.parent = target;
      }
    }
  };

  IceSegment = (function() {
    function IceSegment() {
      this.parent = null;
      this.children = [];
      this.type = null;
    }

    IceSegment.prototype._reconstruct = function() {
      return new IceSegment();
    };

    IceSegment.prototype.stringify = function() {
      var child, string, _i, _len, _ref;
      string = '';
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (typeof child === 'string') {
          string += child;
        } else {
          string += child.stringify();
        }
      }
      return string;
    };

    IceSegment.prototype.clone = function() {
      var child, child_clone, copy, _i, _len, _ref;
      copy = this._reconstruct();
      copy.type = this.type;
      copy.children = [];
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if ((child != null) && typeof child === 'string' || child.constructor.name === 'String') {
          copy.children.push(child);
        } else {
          child_clone = child.clone();
          child_clone.parent = copy;
          copy.children.push(child_clone);
        }
      }
      if (this.droppable != null) {
        copy.droppable = this.droppable;
      }
      return copy;
    };

    IceSegment.prototype.templateify = function() {
      var block, new_block, segment;
      block = this.blockify();
      segment = this;
      new_block = null;
      block.on('dragstart', function() {
        var clone;
        clone = segment.clone();
        new_block = clone.templateify();
        new_block.hide();
        block.after(new_block);
        return block.unbind('dragstart');
      });
      return block.on('dragstop', function() {
        if ((segment.parent != null) || block.parent().length === 0) {
          new_block.show();
          return block.unbind('dragstop');
        }
      });
    };

    return IceSegment;

  })();

  IceStaticSegment = (function(_super) {
    __extends(IceStaticSegment, _super);

    function IceStaticSegment(text) {
      this.parent = null;
      this.children = [text];
      this.type = 'static';
    }

    IceStaticSegment.prototype._reconstruct = function() {
      return new IceStaticSegment();
    };

    IceStaticSegment.prototype.blockify = function() {
      var block, child, _i, _len, _ref;
      block = $('<span>');
      block.addClass('ice_segment');
      block.addClass('ice_' + this.type);
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if ((child != null) && typeof child === 'string' || child.constructor.name === 'String') {
          block.append(child);
        } else {
          block.append(child.blockify());
        }
      }
      return block;
    };

    return IceStaticSegment;

  })(IceSegment);

  IceInlineSegment = (function(_super) {
    __extends(IceInlineSegment, _super);

    function IceInlineSegment(accept, tooltip, options) {
      if (accept == null) {
        accept = function(drop) {
          return __indexOf.call(drop.syntax_type, 'value') >= 0;
        };
      }
      if (tooltip == null) {
        tooltip = '';
      }
      if (options == null) {
        options = [];
      }
      this.parent = null;
      this.children = options[0] != null ? [options[0]] : [];
      this.type = 'inline';
      this.droppable = true;
      this.line_wrapped = false;
      this.accept = accept;
      this.tooltip = tooltip;
      this.options = options;
    }

    IceInlineSegment.prototype._reconstruct = function() {
      return new IceInlineSegment(this.accept, this.tooltip, this.options);
    };

    IceInlineSegment.prototype.stringify = function() {
      var child, string, _i, _len, _ref;
      if (this.line_wrapped) {
        return '\n  ' + ((function() {
          var _i, _len, _ref, _results;
          _ref = this.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(child.stringify());
          }
          return _results;
        }).call(this)).join('\n').replace(/\n/g, '\n  ');
      } else {
        string = '';
        _ref = this.children;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if (typeof child === 'string') {
            string += child;
          } else {
            string += child.stringify();
          }
        }
        return string;
      }
    };

    IceInlineSegment.prototype.blockify = function() {
      var block, checkHeight, checkHeightDelayed, child, input, lineWrap, segment, unWrap, _i, _len, _ref,
        _this = this;
      segment = this;
      block = $('<span>');
      block.addClass('ice_segment');
      block.addClass('ice_' + this.type);
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if ((child != null) && typeof child !== 'string' && child.constructor.name !== 'String') {
          block.append(child.blockify());
        }
      }
      if ((this.tooltip != null) && this.tooltip.length > 0) {
        block.attr('title', this.tooltip);
      }
      block.data('ice_tree', segment);
      input = $("<input>");
      input.addClass("ice_input");
      if (typeof this.children[0] === 'string') {
        input.val(this.children[0]);
      }
      input.keyup(function() {
        if (segment.droppable) {
          return segment.children[0] = this.value;
        }
      });
      block.append(input);
      if (this.options.length > 0) {
        combobox(input, this.options);
      }
      this.line_wrapped = false;
      lineWrap = function() {
        var ghost_element, wrapper_div;
        if (_this.line_wrapped) {
          return false;
        }
        ghost_element = $('<div>');
        block.after(ghost_element);
        wrapper_div = $('<div>').addClass('ice_big_inline_wrapper');
        wrapper_div.append(block);
        ghost_element.replaceWith(wrapper_div);
        return _this.line_wrapped = true;
      };
      unWrap = function() {
        if (!_this.line_wrapped) {
          return false;
        }
        block.parent().replaceWith(block);
        return _this.line_wrapped = false;
      };
      checkHeight = function() {
        if ((block.height() > 100 || block.has('.ice_block').length > 0) && !_this.line_wrapped) {
          return lineWrap();
        } else if ((block.height() < 100 && block.has('.ice_block').length === 0) && _this.line_wrapped) {
          return unWrap();
        }
      };
      checkHeightDelayed = function() {
        return setTimeout(checkHeight, 0);
      };
      $(document.body).mouseup(checkHeightDelayed).keydown(checkHeightDelayed);
      setTimeout(checkHeight, 0);
      block.data('_ice_line_wrap_function', lineWrap);
      input.autoGrowInput({
        comfortZone: 0,
        minWidth: 20,
        maxWidth: Infinity
      });
      block.droppable({
        greedy: true,
        tolerance: 'pointer',
        hoverClass: 'highlight',
        accept: function(drop) {
          return segment.droppable && segment.accept(drop.data('ice_tree'));
        },
        drop: function(event, ui) {
          if (event.target === this) {
            input.val("");
            moveSegment(ui.draggable.data('ice_tree'), segment);
            if (ui.draggable.parent().hasClass('ice_block_command_wrapper')) {
              ui.draggable.parent().detach();
            }
            return $(this).prepend(ui.draggable);
          }
        }
      });
      return block;
    };

    return IceInlineSegment;

  })(IceSegment);

  IceMultiSegment = (function(_super) {
    __extends(IceMultiSegment, _super);

    function IceMultiSegment(delimiter, accepts, tooltip) {
      if (delimiter == null) {
        delimiter = ', ';
      }
      if (accepts == null) {
        accepts = function(drop) {
          return __indexOf.call(drop.syntax_type, 'value') >= 0;
        };
      }
      if (tooltip == null) {
        tooltip = '';
      }
      this.parent = null;
      this.children = [];
      this.type = 'multi';
      this.delimiter = delimiter;
      this.accepts = accepts;
      this.tooltip = tooltip;
    }

    IceMultiSegment.prototype._reconstruct = function() {
      return new IceMultiSegment(this.delimiter, this.accepts);
    };

    IceMultiSegment.prototype.stringify = function() {
      var child;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          _results.push(child.stringify());
        }
        return _results;
      }).call(this)).join(this.delimiter);
    };

    IceMultiSegment.prototype.blockify = function() {
      var block, child, i, segment, _i, _len, _ref;
      segment = this;
      block = $('<span>');
      block.addClass('ice_segment');
      block.addClass('ice_' + this.type);
      if ((this.tooltip != null) && this.tooltip.length > 0) {
        block.attr('title', this.tooltip);
      }
      _ref = this.children;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        child = _ref[i];
        if (typeof child === 'string') {
          block.append(child);
        } else {
          block.append(child.blockify());
        }
        if (i < this.children.length - 1) {
          block.append(this.delimiter);
        }
      }
      block.append($('<button>').text('+').addClass('ice_multi_button').click(function() {
        var new_element;
        new_element = new IceInlineSegment(segment.accepts);
        if (segment.children.length > 0) {
          $(this).before(segment.delimiter);
        }
        new_element.parent = segment;
        segment.children.push(new_element);
        return $(this).before(new_element.blockify());
      }));
      return block;
    };

    return IceMultiSegment;

  })(IceSegment);

  IceBlockSegment = (function(_super) {
    __extends(IceBlockSegment, _super);

    function IceBlockSegment() {
      this.parent = null;
      this.children = [];
      this.type = 'block';
      this.droppable = true;
    }

    IceBlockSegment.prototype._reconstruct = function() {
      return new IceBlockSegment();
    };

    IceBlockSegment.prototype.stringify = function() {
      var child;
      return '\n  ' + ((function() {
        var _i, _len, _ref, _results;
        _ref = this.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          _results.push(child.stringify());
        }
        return _results;
      }).call(this)).join('\n').replace(/\n/g, '\n  ');
    };

    IceBlockSegment.prototype.blockify = function() {
      var block, child, drop_target, segment, _i, _len, _ref;
      segment = this;
      block = $('<div>');
      block.addClass('ice_segment');
      block.addClass('ice_' + this.type);
      _ref = this.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (typeof child === 'string') {
          block.append(child);
        } else {
          block.append($('<div>').addClass('ice_block_command_wrapper').append(child.blockify()));
        }
      }
      block.mousedown(function(origin_event) {
        var existentWrapper, selecting, selector, target, _this;
        document.activeElement.blur();
        target = $(origin_event.target);
        if (target.is(this) || (target.parent().is(this) && target.hasClass('ice_block_command_wrapper')) || target.parent().hasClass('ice_selected_element_wrapper') || target.hasClass('ice_root_bottom_div')) {
          existentWrapper = $('.ice_selected_element_wrapper');
          if (existentWrapper.parent().hasClass('ice_block_command_wrapper')) {
            existentWrapper.parent().replaceWith(existentWrapper.children());
          } else {
            existentWrapper.replaceWith(existentWrapper.children());
          }
          $('.ice_statement').filter('.ui-draggable').css('outline', '').removeClass('ice_selected_highlight').data('overlapPos', null).draggable('enable');
          $('.ice_drop_target, .ice_inline, .ice_block_drop_target').droppable('enable');
          selector = $('<div>');
          selector.addClass('ice_selector');
          selector.data('overlapRerender', true);
          $(document.body).append(selector);
          corners(selector, origin_event, origin_event);
          selecting = true;
          $(document.body).mouseup(function(origin_event) {
            var children, first, last, last_child, selected_elements, selected_parents, wrapper_div;
            if (selecting) {
              children = _this.children();
              selected_elements = [];
              selected_parents = $('');
              last_child = null;
              children.each(function() {
                var true_block;
                true_block = $(this).children();
                if (true_block.hasClass('ice_statement')) {
                  if (overlap(selector, true_block)) {
                    last_child = true_block;
                    return selected_parents = selected_parents.add(this);
                  } else {
                    return true_block.removeClass('ice_selected_highlight');
                  }
                }
              });
              if (selected_parents.size() === 1) {
                selector.remove();
                last_child.addClass('ice_selected_highlight');
                last_child.find('.ice_statement').draggable('disable');
                last_child.find('.ice_drop_target, .ice_inline, .ice_block_drop_target').droppable('disable');
                last_child.draggable('enable');
                selecting = false;
                return;
              }
              first = selected_parents.first();
              last = selected_parents.last();
              selected_parents = first.nextUntil(last).andSelf().add(last);
              selected_parents.each(function() {
                var true_block;
                true_block = $(this).children();
                if (true_block.hasClass('ice_statement')) {
                  true_block.addClass('ice_selected_highlight').find('.ice_statement').add(true_block).draggable('disable');
                  true_block.find('.ice_drop_target, .ice_inline, .ice_block_drop_target').droppable('disable');
                  return selected_elements.push(true_block.data('ice_tree'));
                }
              });
              selected_parents.wrapAll('<div>');
              wrapper_div = selected_parents.parent();
              wrapper_div.addClass('ice_selected_element_wrapper');
              wrapper_div.draggable({
                appendTo: 'body',
                helper: 'clone',
                revert: 'invalid',
                handle: '.ice_statement',
                start: function(event, ui) {
                  return ui.helper.addClass('ui-helper');
                },
                end: function(event, ui) {
                  return ui.helper.removeClass('ui-helper');
                }
              });
              wrapper_div.data('ice_tree', {
                syntax_type: 's',
                is_selected_wrapper: true,
                elements: selected_elements
              });
              selector.remove();
              return selecting = false;
            }
          });
          _this = $(this);
          $(document.body).mousemove(function(event) {
            var children;
            if (selecting) {
              corners(selector, origin_event, event);
              children = _this.children();
              return children.each(function() {
                var true_block;
                true_block = $(this).children();
                if (true_block.hasClass('ice_statement')) {
                  if (overlap(selector, true_block)) {
                    return true_block.css('outline', '2px solid #FF0');
                  } else {
                    return true_block.css('outline', '');
                  }
                }
              });
            }
          });
          return false;
        }
      });
      drop_target = $('<div>');
      drop_target.addClass('ice_block_drop_target');
      drop_target.droppable({
        greedy: true,
        tolerance: 'pointer',
        hoverClass: 'highlight',
        accept: function() {
          return segment.droppable;
        },
        drop: function(event, ui) {
          var tree;
          if (event.target === this) {
            tree = ui.draggable.data('ice_tree');
            if ((tree.parent != null) && tree.parent.type === 'block') {
              ui.draggable.parent().detach();
            }
            block.prepend($('<div>').addClass('ice_block_command_wrapper').append(ui.draggable));
            return moveSegment(tree, segment);
          }
        }
      });
      drop_target.click(function() {
        var new_block, new_block_el;
        if (segment.droppable) {
          new_block = new IceHandwrittenSegment();
          segment.children.unshift(new_block);
          new_block.parent = segment;
          new_block_el = new_block.blockify();
          block.prepend($('<div>').addClass('ice_block_command_wrapper').append(new_block_el));
          return new_block_el.find('.ice_input').focus();
        }
      });
      block.append(drop_target);
      return block;
    };

    return IceBlockSegment;

  })(IceSegment);

  IceStatement = (function(_super) {
    __extends(IceStatement, _super);

    function IceStatement(template, tooltip, type) {
      var child, _i, _len;
      this.parent = null;
      this.children = [];
      for (_i = 0, _len = template.length; _i < _len; _i++) {
        child = template[_i];
        this.children.push(child.clone());
        child.parent = this;
      }
      this.type = 'statement';
      this.droppable = true;
      this.syntax_type = type;
      this.tooltip = tooltip;
    }

    IceStatement.prototype._reconstruct = function() {
      return new IceStatement([], this.tooltip, this.syntax_type);
    };

    IceStatement.prototype.blockify = function() {
      var block, child, drop_target, segment, type, _i, _j, _len, _len1, _ref, _ref1;
      segment = this;
      block = $('<div>');
      block.addClass('ice_segment');
      block.addClass('ice_' + this.type);
      if ((this.tooltip != null) && this.tooltip.length > 0) {
        block.attr('title', this.tooltip);
      }
      if (this.syntax_type != null) {
        _ref = this.syntax_type;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          type = _ref[_i];
          block.addClass('ice_syntax_type_' + type);
        }
      }
      _ref1 = this.children;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        child = _ref1[_j];
        if (typeof child === 'string') {
          block.append(child);
        } else {
          block.append(child.blockify());
        }
      }
      block.data('ice_tree', segment);
      drop_target = $('<div>');
      drop_target.addClass('ice_drop_target');
      drop_target.droppable({
        greedy: true,
        tolerance: 'pointer',
        hoverClass: 'highlight',
        accept: function() {
          return segment.droppable;
        },
        drop: function(event, ui) {
          var tree;
          if (event.target === this) {
            tree = ui.draggable.data('ice_tree');
            if ((tree.parent != null) && tree.parent.type === 'block') {
              ui.draggable.parent().detach();
            }
            if (ui.draggable.parent().hasClass('ice_block_command_wrapper')) {
              ui.draggable.parent().detach();
            }
            block.parent().after($('<div>').addClass('ice_block_command_wrapper').append(ui.draggable));
            return moveSegment(tree, segment);
          }
        }
      });
      drop_target.click(function() {
        var new_block, new_block_el;
        if (segment.droppable) {
          new_block = new IceHandwrittenSegment();
          segment.parent.children.splice(segment.parent.children.indexOf(segment) + 1, 0, new_block);
          new_block.parent = segment.parent;
          new_block_el = new_block.blockify();
          block.parent().after($('<div>').addClass('ice_block_command_wrapper').append(new_block_el));
          return new_block_el.find('.ice_input').focus();
        }
      });
      block.append(drop_target);
      block.draggable({
        appendTo: 'body',
        helper: 'clone',
        revert: 'invalid',
        start: function(event, ui) {
          return ui.helper.addClass('ui-helper');
        },
        end: function(event, ui) {
          return ui.helper.removeClass('ui-helper');
        }
      });
      return block;
    };

    return IceStatement;

  })(IceSegment);

  IceHandwrittenSegment = (function(_super) {
    __extends(IceHandwrittenSegment, _super);

    function IceHandwrittenSegment() {
      IceHandwrittenSegment.__super__.constructor.call(this, []);
    }

    IceHandwrittenSegment.prototype.reblock = function(new_block) {
      return this.parent.children.splice(this.parent.children.indexOf(this), 1, new_block);
    };

    IceHandwrittenSegment.prototype.blockify = function() {
      var block, drop_target, input, segment;
      segment = this;
      block = $('<div>');
      block.addClass('ice_segment');
      block.addClass('ice_statement');
      block.addClass('ice_handwritten');
      block.data('ice_tree', segment);
      drop_target = $('<div>');
      drop_target.addClass('ice_drop_target');
      drop_target.droppable({
        greedy: true,
        tolerance: 'pointer',
        hoverClass: 'highlight',
        accept: function() {
          return segment.droppable;
        },
        drop: function(event, ui) {
          if (event.target === this) {
            moveSegment(ui.draggable.data('ice_tree'), segment);
            if (ui.draggable.parent().hasClass('ice_block_command_wrapper')) {
              ui.draggable.parent().detach();
            }
            return block.parent().after($('<div>').addClass('ice_block_command_wrapper').append(ui.draggable));
          }
        }
      });
      drop_target.click(function() {
        var new_block, new_block_el;
        if (segment.droppable) {
          new_block = new IceHandwrittenSegment();
          segment.parent.children.splice(segment.parent.children.indexOf(segment) + 1, 0, new_block);
          new_block.parent = segment.parent;
          new_block_el = new_block.blockify();
          block.parent().after($('<div>').addClass('ice_block_command_wrapper').append(new_block_el));
          return new_block_el.find('.ice_input').focus();
        }
      });
      block.append(drop_target);
      block.draggable({
        appendTo: 'body',
        helper: 'clone',
        revert: 'invalid'
      });
      input = $("<input>");
      input.addClass("ice_input");
      input.keyup(function() {
        return segment.children[0] = this.value;
      });
      input.keydown(function(event) {
        var child, focal, new_block, new_parent, new_segment, p_prev, prev, _i, _len, _ref;
        if (event.keyCode === 13 && segment.parent.type === 'block') {
          new_segment = new IceHandwrittenSegment(segment.accepts);
          segment.parent.children.splice(segment.parent.children.indexOf(segment) + 1, 0, new_segment);
          new_segment.parent = segment.parent;
          new_block = new_segment.blockify();
          block.parent().after($('<div>').addClass('ice_block_command_wrapper').append(new_block));
          return new_block.find('.ice_input').focus();
        } else if (event.keyCode === 8 && this.value.length === 0) {
          prev = block.parent().prev().find('.ice_input');
          focal = prev.length > 0 ? prev : block.parent().parent().siblings().filter('.ice_handwritten .ice_input').first();
          segment.parent.children.splice(segment.parent.children.indexOf(segment), 1);
          if (segment.parent._trembling && segment.parent.children.length === 0) {
            segment.parent.parent.children.pop();
            block.parent().parent().remove();
          }
          focal.focus();
          block.parent().remove();
          return false;
        } else if (event.keyCode === 9 && segment.parent.type === 'block') {
          p_prev = block.parent().prevAll('.ice_block_command_wrapper:first');
          prev = p_prev.find('.ice_segment').data('ice_tree');
          if (prev == null) {
            return false;
          }
          segment.parent.children.splice(segment.parent.children.indexOf(segment), 1);
          _ref = prev.children.slice(0).reverse();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            if (child.type === 'block') {
              child.children.push(segment);
              segment.parent = child;
              block.parent().detach();
              p_prev.children().children().filter('.ice_block').last().append($('<div>').addClass('ice_block_command_wrapper').append(block));
              input.focus();
              return false;
            }
          }
          new_parent = new IceBlockSegment();
          new_parent._trembling = true;
          new_parent.parent = prev;
          new_block = new_parent.blockify();
          block.parent().detach();
          p_prev.children().first().append(new_block);
          new_block.append($('<div>').addClass('ice_block_command_wrapper').append(block));
          new_block.data('trembling', true);
          prev.children.push(new_parent);
          new_parent.children.push(segment);
          segment.parent = new_parent;
          input.focus();
          return false;
        }
      });
      block.append(input);
      input.autoGrowInput({
        comfortZone: 0,
        minWidth: 20,
        maxWidth: Infinity
      });
      return block;
    };

    return IceHandwrittenSegment;

  })(IceStatement);

  corners = function(element, a, b) {
    var x, y;
    x = [a.pageX, b.pageX];
    y = [a.pageY, b.pageY];
    x.sort(function(a, b) {
      return a - b;
    });
    y.sort(function(a, b) {
      return a - b;
    });
    return element.css({
      left: x[0],
      top: y[0],
      width: x[1] - x[0],
      height: y[1] - y[0]
    });
  };

  genPosData = function(el) {
    var pos;
    pos = el.data('overlapPos');
    if ((el.data('overlapRerender') == null) && (el.data('overlapPos') != null)) {
      return pos;
    } else {
      pos = {};
      pos.head = el.offset();
      pos.tail = {
        left: pos.head.left + el.width(),
        top: pos.head.top + el.height()
      };
      el.data('overlapPos', pos);
      return pos;
    }
  };

  overlap = function(a, b) {
    var a_pos, b_pos;
    a_pos = genPosData(a);
    b_pos = genPosData(b);
    return a_pos.head.left < b_pos.tail.left && b_pos.head.left < a_pos.tail.left && a_pos.head.top < b_pos.tail.top && b_pos.head.top < a_pos.tail.top;
  };

  IceEditor = (function() {
    function IceEditor(element, templates, blockifier) {
      var attempt_reblock, block, bottom_div, category, checkHeight, details, key, keyJustDown, _i, _len, _ref,
        _this = this;
      this.clipboard = [];
      this.mode = 'block';
      this.element = $(element);
      this.editor_el = document.createElement('div');
      $(this.editor_el).css({
        position: 'absolute',
        display: 'none',
        top: 0,
        bottom: 0,
        left: 0,
        right: 0,
        'line-height': '20px'
      });
      this.element.append(this.editor_el);
      this.editor = ace.edit(this.editor_el);
      this.editor.setTheme('ace/theme/chrome');
      this.editor.setFontSize(15);
      this.editor.getSession().setUseWorker(false);
      this.editor.getSession().setMode('ace/mode/coffee');
      this.editor.getSession().setTabSize(2);
      this.editor.getSession().setUseSoftTabs(true);
      this.palette = $('<div>');
      this.palette.addClass('ice_palette blockish');
      for (_i = 0, _len = templates.length; _i < _len; _i++) {
        category = templates[_i];
        details = $('<details>').addClass('ice_palette_detail');
        details.append($('<summary>').text(category.name));
        _ref = category.blocks;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          block = _ref[key];
          details.append($('<div>').addClass('ice_palette_template_wrapper').append((defrost(block)).templateify()));
        }
        this.palette.append(details);
      }
      this.palette.droppable({
        greedy: true,
        tolerance: 'pointer',
        hoverClass: 'highlight',
        accept: function(drop) {
          return true;
        },
        drop: function(event, ui) {
          if (ui.draggable.parent().hasClass('ice_block_command_wrapper')) {
            ui.draggable.parent().detach();
          }
          moveSegment(ui.draggable.data('ice_tree'), null);
          ui.draggable.detach();
          ui.draggable.trigger('dragstop');
          return ui.draggable.remove();
        }
      });
      this.workspace = $('<div>');
      this.workspace.addClass('ice_workspace blockish');
      $(document.body).bind('keydown', 'backspace', function() {
        var children, selected;
        selected = _this.workspace.find('.ice_selected_element_wrapper');
        if (selected.size() > 0) {
          children = selected.children();
          children.each(function() {
            return moveSegment($(this).children().data('ice_tree'), null);
          });
        } else {
          selected = _this.workspace.find('.ice_selected_highlight');
          if (selected.size() > 0) {
            moveSegment(selected.data('ice_tree'), null);
          }
        }
        return selected.remove();
      });
      keyJustDown = false;
      $(document).bind('keydown', 'ctrl+c', function() {
        var children, selected;
        if (!keyJustDown) {
          selected = _this.workspace.find('.ice_selected_element_wrapper');
          if (selected.size() > 0) {
            _this.clipboard.length = 0;
            children = selected.children();
            _this = _this;
            children.each(function() {
              return _this.clipboard.push($(this).children().data('ice_tree'));
            });
          } else {
            selected = _this.workspace.find('.ice_selected_highlight');
            _this.clipboard.length = 0;
            if (selected.size() > 0) {
              _this.clipboard.push(selected.first().data('ice_tree'));
            }
          }
        }
        keyJustDown = true;
        return setTimeout((function() {
          return keyJustDown = false;
        }), 0);
      });
      $(document).bind('keydown', 'ctrl+v', function() {
        var blocks, clones, statement, _j, _len1;
        if (!keyJustDown) {
          if (_this.clipboard.length > 0) {
            clones = (function() {
              var _j, _len1, _ref1, _results;
              _ref1 = this.clipboard;
              _results = [];
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                statement = _ref1[_j];
                _results.push(statement.clone());
              }
              return _results;
            }).call(_this);
            blocks = (function() {
              var _j, _len1, _results;
              _results = [];
              for (_j = 0, _len1 = clones.length; _j < _len1; _j++) {
                statement = clones[_j];
                _results.push(statement.blockify());
              }
              return _results;
            })();
            for (_j = 0, _len1 = blocks.length; _j < _len1; _j++) {
              block = blocks[_j];
              _this.root_element.append($("<div>").addClass("ice_block_command_wrapper").append(block));
            }
            moveSegment(clones, _this.root);
          }
        }
        keyJustDown = true;
        return setTimeout((function() {
          return keyJustDown = false;
        }), 0);
      });
      this.root = new IceBlockSegment();
      this.root_element = this.root.blockify();
      this.workspace.append(this.root_element);
      this.color_tester = $("<div>").addClass('color-tester');
      this.element.append(this.color_tester);
      bottom_div = this.bottom_div = $('<div>');
      bottom_div.addClass('ice_root_bottom_div');
      this.root_element.append(bottom_div);
      _this = this;
      bottom_div.droppable({
        greedy: true,
        tolerance: 'pointer',
        hoverClass: 'highlight',
        accept: function(drop) {
          return true;
        },
        drop: function(event, ui) {
          moveSegment(ui.draggable.data('ice_tree'), _this.root.children.length > 0 ? _this.root.children[_this.root.children.length - 1] : _this.root);
          if (ui.draggable.parent().hasClass('ice_block_command_wrapper')) {
            ui.draggable.parent().detach();
          }
          return bottom_div.before($('<div>').addClass('ice_block_command_wrapper').append(ui.draggable));
        }
      });
      checkHeight = function() {
        return setTimeout((function() {
          var last_element, last_element_bottom_edge;
          last_element = _this.root_element.children().filter('.ice_block_command_wrapper, .ice_selected_element_wrapper').last();
          last_element_bottom_edge = last_element.length > 0 ? last_element.position().top + last_element.height() : 5;
          return bottom_div.height(_this.root_element.height() - last_element_bottom_edge);
        }), 0);
      };
      attempt_reblock = function() {
        return $('.ice_handwritten').not('.ice_handwritten .ice_handwritten').each(function() {
          var error, tree;
          tree = $(this).data('ice_tree');
          try {
            block = (blockifier(tree.stringify())).children[0];
            block.parent = tree.parent;
            tree.parent.children.splice(tree.parent.children.indexOf(tree), 1, block);
            return $(this).replaceWith(block.blockify());
          } catch (_error) {
            error = _error;
            return console.log(error);
          }
        });
      };
      $(document.body).mouseup(checkHeight).mouseup(attempt_reblock).keydown(checkHeight).keydown(function(event) {
        var _ref1;
        if ((_ref1 = event.keyCode) === 13 || _ref1 === 9) {
          return attempt_reblock();
        }
      });
      this.element.append(this.palette).append(this.workspace).append(this.selector);
      this.blockifier = blockifier;
    }

    IceEditor.prototype.getValue = function() {
      if (this.mode === 'block') {
        return this.root.stringify().slice(3).replace(/\n  /g, '\n');
      } else {
        return this.editor.getValue();
      }
    };

    IceEditor.prototype.setValue = function(value) {
      var bottom_div, checkHeight, _this;
      this.workspace.html('');
      this.root = this.blockifier(value);
      this.root_element = this.root.blockify();
      this.workspace.append(this.root_element);
      bottom_div = this.bottom_div = $('<div>');
      bottom_div.addClass('ice_root_bottom_div');
      this.root_element.append(bottom_div);
      _this = this;
      bottom_div.droppable({
        greedy: true,
        tolerance: 'pointer',
        hoverClass: 'highlight',
        accept: function(drop) {
          return true;
        },
        drop: function(event, ui) {
          moveSegment(ui.draggable.data('ice_tree'), _this.root.children.length > 0 ? _this.root.children[_this.root.children.length - 1] : _this.root);
          if (ui.draggable.parent().hasClass('ice_block_command_wrapper')) {
            ui.draggable.parent().detach();
          }
          return bottom_div.before($('<div>').addClass('ice_block_command_wrapper').append(ui.draggable));
        }
      });
      checkHeight = function() {
        return setTimeout((function() {
          var last_element, last_element_bottom_edge;
          last_element = _this.root_element.children().filter('.ice_block_command_wrapper, .ice_selected_element_wrapper').last();
          last_element_bottom_edge = last_element.length > 0 ? last_element.position().top + last_element.height() : 5;
          return bottom_div.height(_this.root_element.height() - last_element_bottom_edge);
        }), 0);
      };
      $(document.body).mouseup(checkHeight).keydown(checkHeight);
      return this.editor.setValue(value);
    };

    IceEditor.prototype.melt = function() {
      var _this = this;
      if (this.mode !== 'block') {
        return false;
      }
      this.mode = 'transitioning';
      this.palette.css('border', 'none').animate({
        width: 'toggle',
        opacity: 'toggle'
      }, 1200);
      this.workspace.animate({
        'background-color': $.Color('#FFF'),
        'left': 0,
        'padding-left': 60
      }, 1200);
      this.root_element.find('.combobox-searcher').hide();
      this.root_element.find('.ice_segment, .ice_input').andSelf().animate({
        'border-width': 0,
        'background-color': 'transparent',
        'padding': 0,
        'min-height': 0,
        'min-width': 0
      }, 1200, function() {
        var new_value;
        _this.workspace.hide();
        $(_this.editor_el).show();
        new_value = _this.root.stringify().slice(3).replace(/\n  /g, '\n');
        _this.editor.setValue(new_value, 1);
        return _this.mode = 'text';
      });
      return this.root_element.find('.ice_segment, .ice_input').css('height', 'auto');
    };

    IceEditor.prototype.freeze = function() {
      var inputs, segments,
        _this = this;
      if (this.mode !== 'text') {
        return false;
      }
      this.mode = 'transitioning';
      $(this.editor_el).hide();
      this.workspace.show();
      this.setValue(this.editor.getValue());
      this.workspace.css('background-color', '#FFF').find('.ice_input').each(function() {
        return $(this).data('_autogrow_check_function')();
      });
      segments = this.root_element.find('.ice_segment').andSelf().css({
        'background-color': 'transparent',
        'padding': 0,
        'border-width': 0
      });
      inputs = this.root_element.find('.ice_input').css({
        'background-color': 'transparent'
      });
      setTimeout((function() {
        _this.palette.css('border', '').animate({
          opacity: 'toggle',
          width: 'toggle',
          queue: false
        }, 1200, function() {
          return _this.mode = 'block';
        });
        _this.workspace.animate({
          'background-color': '#DDD',
          'left': 200,
          'padding-left': 0
        }, 1200);
        _this.root_element.find('.ice_inline').each(function() {
          if ($(this).has('.ice_block').length > 0) {
            return $(this).data('_ice_line_wrap_function')();
          }
        });
        inputs.animate({
          'background-color': '#FFF'
        });
        return setTimeout((function() {
          return segments.each(function() {
            var border, color, padding;
            $(this).css({
              'background-color': '',
              'padding': '',
              'border-width': ''
            });
            color = $(this).css('background-color');
            padding = $(this).css('padding');
            border = $(this).css('border-width');
            $(this).css({
              'background-color': 'transparent',
              'padding': 0,
              'border-width': 0
            });
            return $(this).animate({
              'background-color': color,
              'padding': padding,
              'border-width': border
            }, 1200);
          });
        }), 0);
      }), 100);
      return true;
    };

    IceEditor.prototype.toggle = function() {
      if (this.mode === 'block') {
        return this.melt();
      } else if (this.mode === 'text') {
        return this.freeze();
      } else {
        return false;
      }
    };

    return IceEditor;

  })();

  quoted_regex = /{{((?:\w|\d)*)((?:...)?)}}/g;

  defrost = function() {
    var child, dict, final, found, frosting, index, inlines, key, new_block, new_child, sub, subbed, tooltip, types, value, _i, _len;
    frosting = arguments[0], sub = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    tooltip = frosting.tooltip;
    types = frosting.types;
    dict = frosting.dict;
    frosting = frosting.frosting;
    IceStatement(final = new IceStatement([], tooltip, types));
    inlines = {};
    index = 0;
    found = null;
    while ((found = quoted_regex.exec(frosting)) != null) {
      final.children.push(new IceStaticSegment(frosting.slice(index, found.index)));
      index = found.index + found[0].length;
      subbed = sub.shift();
      if (found[1] === 'block') {
        if (subbed != null) {
          subbed.parent = final;
          final.children.push(subbed);
        } else {
          new_block = new IceBlockSegment();
          final.children.push(new_block);
          new_block.parent = final;
        }
        if (index < frosting.length - 1) {
          final.children.push(new IceStaticSegment('\n'));
        }
      } else if (found[2] === '...') {
        inlines[found[1]] = new IceMultiSegment();
        final.children.push(inlines[found[1]]);
        if (subbed != null) {
          for (_i = 0, _len = subbed.length; _i < _len; _i++) {
            child = subbed[_i];
            new_child = new IceInlineSegment();
            if (child != null) {
              new_child.children[0] = child;
              child.parent = new_child;
              new_child.droppable = typeof child === 'string';
            }
            new_child.parent = inlines[found[1]];
            inlines[found[1]].children.push(new_child);
          }
        }
      } else {
        inlines[found[1]] = new IceInlineSegment();
        final.children.push(inlines[found[1]]);
        inlines[found[1]].parent = final;
        if (subbed != null) {
          inlines[found[1]].children[0] = subbed;
          inlines[found[1]].droppable = typeof subbed === 'string';
          subbed.parent = inlines[found[1]];
        }
      }
    }
    final.children.push(new IceStaticSegment(frosting.slice(index, frosting.length)));
    for (key in dict) {
      if (!__hasProp.call(dict, key)) continue;
      value = dict[key];
      inlines[key].tooltip = value.tooltip;
      if ('options' in value && value.options.length > 0) {
        inlines[key].options = dict[key].options;
        if (inlines[key].children.length === 0) {
          inlines[key].children[0] = dict[key].options[0];
        }
      }
    }
    return final;
  };

  destructure = function(string) {
    var blocks, indent, line, lines, new_block, _i, _len;
    lines = string.split('\n');
    blocks = {
      head: null,
      parent: null,
      depth: -2,
      children: []
    };
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      indent = line.length - (line = line.trim()).length;
      if (line.length === 0) {
        continue;
      }
      new_block = {
        parent: blocks,
        head: line,
        depth: indent,
        children: []
      };
      while (indent <= blocks.depth) {
        blocks = blocks.parent;
      }
      blocks.children.push(new_block);
      if (indent > blocks.depth) {
        blocks = new_block;
      }
    }
    while (-2 < blocks.depth) {
      blocks = blocks.parent;
    }
    return blocks;
  };

  to_frosting = function(structure) {
    var all, block, categories, category, child, key, line, new_block, new_category, nickname, type, value, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
    categories = [];
    all = {};
    _ref = structure.children;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      category = _ref[_i];
      new_category = {
        name: category.head,
        blocks: {}
      };
      categories.push(new_category);
      _ref1 = category.children;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        block = _ref1[_j];
        new_block = {
          tooltip: block.head.slice(block.head.indexOf('.') + 1, block.head.lastIndexOf('(')).trim(),
          frosting: block.children[0].head,
          types: (function() {
            var _k, _len2, _ref2, _results;
            _ref2 = block.head.slice(block.head.lastIndexOf('(')).slice(1, -1).split(',');
            _results = [];
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              type = _ref2[_k];
              _results.push(type.trim());
            }
            return _results;
          })(),
          dict: {}
        };
        nickname = block.head.slice(0, block.head.indexOf('.'));
        new_category.blocks[nickname] = new_block;
        all[nickname] = new_block;
        _ref2 = block.children[0].children;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          line = _ref2[_k];
          _ref3 = line.head.split(':'), key = _ref3[0], value = _ref3[1];
          new_block.dict[key] = {
            tooltip: value
          };
          if (line.children.length > 0) {
            new_block.dict[key].options = (function() {
              var _l, _len3, _ref4, _results;
              _ref4 = line.children;
              _results = [];
              for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
                child = _ref4[_l];
                _results.push(child.head);
              }
              return _results;
            })();
          }
        }
      }
    }
    return {
      categories: categories,
      all: all
    };
  };

  window.ICE = {
    IceEditor: IceEditor,
    IceBlockSegment: IceBlockSegment,
    IceStaticSegment: IceStaticSegment,
    sub: defrost,
    frosting: function(str) {
      return to_frosting(destructure(str));
    }
  };

}).call(this);

/*
//@ sourceMappingURL=ice.map
*/
